<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="cc8e892f-86f4-474a-9bee-3a522dffd8ea" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="RCR126" searchProperties="true" timeout="0" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="cc8e892f-86f4-474a-9bee-3a522dffd8eafileName">RCR126</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="groovy" name="Initialise_Properties" id="d64932f8-70b1-4a12-9b67-a057891e16c6">
    <con:settings/>
    <con:config>
      <script>// initialise values
testRunner.testCase.setPropertyValue( 'TotalOfValuesChecked',  '0')
testRunner.testCase.setPropertyValue( 'NumOfIterations',  '0')
testRunner.testCase.setPropertyValue( 'PaymentNumber', '1')

//Feb Prices
/*testRunner.testCase.setPropertyValue('RequestDateTime','2019-04-17T00:00:00')
testRunner.testCase.setPropertyValue('PolicyStartDateTime','2019-03-17T00:00:00')
testRunner.testCase.setPropertyValue('PolicyEndDateTime','2020-03-16T00:00:00')
testRunner.testCase.setPropertyValue('TaxDateTime','2019-04-17T00:00:00')
testRunner.testCase.setPropertyValue('PriceDate','2019-04-17T00:00:00')
testRunner.testCase.setPropertyValue('FeesDate','2019-04-17T00:00:00')*/

//Creates outout file
now=new java.text.SimpleDateFormat("yyyyMMdd'T'HHmmss").format(new Date())

testRunner.testCase.setPropertyValue( 'File',("N:/Systems_development/RIO/Road Renewals/Soap UI/Test Results/RCR126/RenewalE2Eresults" + now + ".txt"));
FileOutputStream out1 = new FileOutputStream(context.expand( '${#TestCase#File}' ));
out1.write();
out1.close();</script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasource" name="RCR126All" id="2639a183-3cb9-43b9-85e2-7f67aaabdfe9">
    <con:settings>
      <con:setting id="com.eviware.soapui.impl.wsdl.teststeps.datasource.DataSourceContainer@prepared-properties">&lt;xml-fragment/></con:setting>
    </con:settings>
    <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dataSource type="Excel">
        <con:configuration>
          <file>N:/Systems_development/RIO/Road Renewals/SOAP pricing/RCR-126 Tiered Benefits/Renewal Input For SOAP RCR126.xlsx</file>
          <worksheet>RENEWAL1</worksheet>
          <cell>A2</cell>
          <ignoreEmpty>true</ignoreEmpty>
          <evaluateFormulas>false</evaluateFormulas>
        </con:configuration>
      </con:dataSource>
      <con:shared>false</con:shared>
      <con:restartShared>false</con:restartShared>
      <con:property>ID</con:property>
      <con:property>OFFER_CODE</con:property>
      <con:property>POLICYSTARTDATE</con:property>
      <con:property>POLICYENDDATE</con:property>
      <con:property>NEWPOLICYSTARTDATE</con:property>
      <con:property>NEWPOLICYENDDATE</con:property>
      <con:property>MAN_CON</con:property>
      <con:property>POSTCODE</con:property>
      <con:property>PRODUCT_TYPE</con:property>
      <con:property>COVER</con:property>
      <con:property>RO</con:property>
      <con:property>RE</con:property>
      <con:property>HS</con:property>
      <con:property>SM</con:property>
      <con:property>BRC</con:property>
      <con:property>OFFER</con:property>
      <con:property>FlexFactor</con:property>
      <con:property>A_D</con:property>
      <con:property>Car1</con:property>
      <con:property>Car2</con:property>
      <con:property>Car3</con:property>
      <con:property>Car4</con:property>
      <con:property>RENEWAL _OFFERCODE</con:property>
      <con:property>Core RAP AQRP</con:property>
      <con:property>Core CMM AQRP</con:property>
      <con:property>BRC SAP AQRP</con:property>
      <con:property>BRC RAP AQRP</con:property>
      <con:property>BRC CMM AQRP</con:property>
      <con:property>Niche SAP AQRP</con:property>
      <con:property>Niche RAP AQRP</con:property>
      <con:property>Niche CMM AQRP</con:property>
      <con:property>PaymentType</con:property>
      <con:property>SAP,RO,TYPE</con:property>
      <con:property>SAP,RO,AMOUNT</con:property>
      <con:property>SAP,RE,TYPE</con:property>
      <con:property>SAP,RE,AMOUNT</con:property>
      <con:property>SAP,HS,TYPE</con:property>
      <con:property>SAP,HS,AMOUNT</con:property>
      <con:property>SAP,SM,TYPE</con:property>
      <con:property>SAP,SM,AMOUNT</con:property>
      <con:property>SAP,BRC,TYPE</con:property>
      <con:property>SAP,BRC,AMOUNT</con:property>
      <con:property>RAP,RO,TYPE</con:property>
      <con:property>RAP,RO,AMOUNT</con:property>
      <con:property>RAP,RE,TYPE</con:property>
      <con:property>RAP,RE,AMOUNT</con:property>
      <con:property>RAP,HS,TYPE</con:property>
      <con:property>RAP,HS,AMOUNT</con:property>
      <con:property>RAP,SM,TYPE</con:property>
      <con:property>RAP,SM,AMOUNT</con:property>
      <con:property>RAP,BRC,TYPE</con:property>
      <con:property>RAP,BRC,AMOUNT</con:property>
      <con:property>CMM,RO,TYPE</con:property>
      <con:property>CMM,RO,AMOUNT</con:property>
      <con:property>CMM,RE,TYPE</con:property>
      <con:property>CMM,RE,AMOUNT</con:property>
      <con:property>CMM,HS,TYPE</con:property>
      <con:property>CMM,HS,AMOUNT</con:property>
      <con:property>CMM,SM,TYPE</con:property>
      <con:property>CMM,SM,AMOUNT</con:property>
      <con:property>CMM,BRC,TYPE</con:property>
      <con:property>CMM,BRC,AMOUNT</con:property>
      <con:property>M24,RO,TYPE</con:property>
      <con:property>M24,RO,AMOUNT</con:property>
      <con:property>M24,RE,TYPE</con:property>
      <con:property>M24,RE,AMOUNT</con:property>
      <con:property>M24,HS,TYPE</con:property>
      <con:property>M24,HS,AMOUNT</con:property>
      <con:property>M24,SM,TYPE</con:property>
      <con:property>M24,SM,AMOUNT</con:property>
      <con:property>M24,BRC,TYPE</con:property>
      <con:property>M24,BRC,AMOUNT</con:property>
      <con:property>CQM,RO,TYPE</con:property>
      <con:property>CQM,RO,AMOUNT</con:property>
      <con:property>CQM,RE,TYPE</con:property>
      <con:property>CQM,RE,AMOUNT</con:property>
      <con:property>CQM,HS,TYPE</con:property>
      <con:property>CQM,HS,AMOUNT</con:property>
      <con:property>CQM,SM,TYPE</con:property>
      <con:property>CQM,SM,AMOUNT</con:property>
      <con:property>CQM,BRC,TYPE</con:property>
      <con:property>CQM,BRC,AMOUNT</con:property>
      <con:startRow>0</con:startRow>
      <con:endRow/>
      <con:recordsPerIteration>1</con:recordsPerIteration>
      <con:completeLastOperation>false</con:completeLastOperation>
      <con:trimValues>false</con:trimValues>
      <con:entitizeValues>false</con:entitizeValues>
      <con:restartOnRun>true</con:restartOnRun>
      <con:expandProperties>false</con:expandProperties>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="TestRun" id="1509bb02-a24b-4033-84dd-b251bdd15d59" disabled="true">
    <con:settings/>
    <con:config>
      <script>def project = testRunner.testCase.testSuite.project;

testRunner.testCase.setPropertyValue('payment','RAP');

testRunner.runTestStep( project.testSuites['RCR126'].testCases['RCR126'].testSteps['Setup_ProductList_XML'] );
testRunner.runTestStep( project.testSuites['RCR126'].testCases['RCR126'].testSteps['Setup_Cover_Value'] );
testRunner.runTestStep( project.testSuites['RCR126'].testCases['RCR126'].testSteps['Setup_BRCList_XML'] );
testRunner.runTestStep( project.testSuites['RCR126'].testCases['RCR126'].testSteps['NB Request'] );
testRunner.runTestStep( project.testSuites['RCR126'].testCases['RCR126'].testSteps['Setup_New_ProductList_XML'] );
testRunner.runTestStep( project.testSuites['RCR126'].testCases['RCR126'].testSteps['Setup_NewCover_Value'] );
testRunner.runTestStep( project.testSuites['RCR126'].testCases['RCR126'].testSteps['Setup_CurrentPolicyPrice'] );
testRunner.runTestStep( project.testSuites['RCR126'].testCases['RCR126'].testSteps['RCR126Quote'] );</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="SetupPayment" id="cc67c087-add9-4cd1-9e7f-8e2a8ae9a78c">
    <con:settings/>
    <con:config>
      <script>testRunner.testCase.setPropertyValue( 'ID',  context.expand( '${RCR126All#ID}' ))
def ID = context.expand( '${RCR126All#ID}' )
def productType = context.expand( '${RCR126All#PRODUCT_TYPE}' )
def paymentflag = context.expand( '${RCR126All#PaymentType}' )
def SAP,RAP,CMM
log.info(paymentflag  )

if(paymentflag.equals("NYNNN") || paymentflag.equals("YYNNN") || paymentflag.equals("YYYYY"))
{
	RAP="Y"
}
if(paymentflag.equals("YYNNN") || paymentflag.equals("YYYYY"))
{
	SAP="Y"
}
if(paymentflag.equals("YYYYY"))
{
	CMM="Y"
	M24="N"
	CQM="N"
}

int i = Integer.parseInt(context.expand( '${#TestCase#PaymentNumber}' ))

if(i==1)
{
	if(RAP=="Y")
	{
		testRunner.testCase.setPropertyValue('payment','RAP');
		i = i+1;
		testRunner.testCase.setPropertyValue( 'PaymentNumber',  new Integer(i).toString())
		log.info(ID+";"+i+"RAP")
	}
	else 
	{
		log.info("Skip Payment RAP")
		i = i+1;
		testRunner.testCase.setPropertyValue('PaymentNumber','1')
		log.info(ID+";"+i+"RAP")
		testRunner.gotoStepByName("Payment");
	}
}
else if(i==2)
{
	if(SAP=="Y")
	{
		testRunner.testCase.setPropertyValue('payment','SAP');
		i = i+1;
		testRunner.testCase.setPropertyValue('PaymentNumber',new Integer(i).toString())
		log.info(ID+";"+i+"SAP")
	}
	else
	{
		log.info("Skip Payment SAP")
		i = i+1;
		testRunner.testCase.setPropertyValue('PaymentNumber',new Integer(i).toString())
		log.info(ID+";"+i+"SAP")
		testRunner.gotoStepByName("Payment");
	}
}
else if(i==3)
{
	if(CMM=="Y")
	{
		testRunner.testCase.setPropertyValue('payment','CMM');
		i = i+1
		testRunner.testCase.setPropertyValue('PaymentNumber',new Integer(i).toString())
		log.info(ID+";"+i+"CMM")
	}
	else 
	{
		log.info("Skip Payment CMM")
		testRunner.testCase.setPropertyValue('PaymentNumber','1')
		log.info(ID+";"+i+"CMM")
		testRunner.gotoStepByName("Payment");
		
	}
}

else 
{	
	testRunner.testCase.setPropertyValue( 'PaymentNumber', '1')
	testRunner.gotoStepByName("Payment");
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Setup_ProductList_XML" id="3692a15c-3d46-4535-9754-340d3e945bc7">
    <con:settings/>
    <con:config>
      <script><![CDATA[def ProductType = context.expand( '${RCR126All#PRODUCT_TYPE}' )
def post = context.expand( '${RCR126All#POSTCODE}' )
String delimiters = "\\,|\\&()";
String[] prodArr = ProductType.split(delimiters);
StringBuilder strBld = new StringBuilder();
StringBuilder strBld2 = new StringBuilder();
StringBuilder strBld3 = new StringBuilder();

if(prodArr.length > 0)
{

	for (prod in prodArr)
	{
		strBld.append("<gen:Product>");
		strBld.append("<prod:ProductCode>");
		if(prod.trim().equals("Roadside"))
		{
			if(prod.trim().equals("Roadside"))
			{
				if (context.expand( '${RCR126All#COVER}' ) == 'V1')
				{
					strBld.append("PRD_UK_0002");
				}
				else
				{
					strBld.append("PRD_UK_0001");
				}
			}
			if(post.equals("JE2 3RP")||post.equals("IM99 3EP"))
			{
				strBld.append("PRD_UK_0014");
				strBld2.append("PRD_UK_0014");
				strBld3.append("Roadside");
			}

		}
		if(prod.trim().equals("Basic Breakdown Cover"))
		{
			strBld.append("PRD_UK_0020");
			strBld2.append("PRD_UK_0020");
			strBld3.append("BasicBreakdown");
		}
		if(prod.trim().equals("ROCO"))
		{
			strBld.append("PRD_UK_0021");
			strBld2.append("PRD_UK_0021");
			strBld3.append("ROCO");
		}
		if(prod.trim().equals("ROPOV"))
		{
			strBld.append("PRD_UK_0023");
			strBld2.append("PRD_UK_0023");
			strBld3.append("ROPOV");
		}
		if(prod.trim().equals("Local Driver"))
		{
			strBld.append("PRD_UK_0022");			
			strBld2.append("PRD_UK_0022");
			strBld3.append("LocalDriver");
		}
		if(prod.trim().equals("Standby"))
		{
			strBld.append("PRD_UK_0030");
			strBld2.append("PRD_UK_0030");
			strBld3.append("Standby");
		}
		if(prod.trim().equals("Start Up"))
		{
			strBld.append("PRD_UK_0024");
			strBld2.append("PRD_UK_0024");
			strBld3.append("StartUp");
		}
		if(prod.trim().equals("Home Start"))
		{
			strBld.append("PRD_UK_0003");
		}
		if(prod.trim().equals("Relay"))
		{
			if(post.equals("JE2 3RP")||post.equals("IM99 3EP"))
			{
				strBld.append("PRD_UK_0015");	
			}
			else
			{
				strBld.append("PRD_UK_0004");
			}
		}
		if(prod.trim().equals("Stay Mobile"))
		{
			if(post.equals("JE2 3RP")||post.equals("IM99 3EP"))
			{
				strBld.append("PRD_UK_0016");	
			}
			else
			{
				strBld.append("PRD_UK_0005");
			}
		}		
		strBld.append("</prod:ProductCode>");
		strBld.append("</gen:Product>");
	}
	
	if(context.expand( '${RCR126All#BRC}' ) =="Y")
	{
		strBld.append("<gen:Product>");
		strBld.append("<prod:ProductCode>");
		strBld.append("PRD_UK_0018");
		strBld.append("</prod:ProductCode>");
		strBld.append("</gen:Product>");
	}
}

testRunner.testCase.setPropertyValue( "ProductList_XML",  strBld.toString()) //sends nodes in Request

log.info(strBld)]]></script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Setup_Cover_Value" id="5810a09c-c2e2-4bd4-96ff-35c493ba6cbc">
    <con:settings/>
    <con:config>
      <script>def cover = context.expand( '${RCR126All#COVER}' )

String coverToUse = "";

if(cover.equals("V1"))
{
	coverToUse = "0";
}
if(cover.equals("P1"))
{
	coverToUse = "1";
}
if(cover.equals("P2"))
{
	coverToUse = "2";
}
if(cover.equals("P3"))
{
	coverToUse = "3";
}
if(cover.equals("P4"))
{
	coverToUse = "4";
}

testRunner.testCase.setPropertyValue( "Cover",  coverToUse)
log.info(coverToUse)</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Setup_BRCList_XML" id="a8e2947c-0b38-4cab-a352-4522073436ae">
    <con:settings/>
    <con:config>
      <script><![CDATA[def BRC = context.expand( '${RCR126All#BRC}' )
if (BRC.equals("Y"))
{
	def car1 = context.expand( '${RCR126All#Car1}' )
	def car2 = context.expand( '${RCR126All#Car2}' )
	def car3 = context.expand( '${RCR126All#Car3}' )
	def car4 = context.expand( '${RCR126All#Car4}' )
	log.info ("Car 1:" + car1 +",Car 2:" + car2 + ",Car 3:" + car3 +",Car 4:" + car4)
	StringBuilder strBld = new StringBuilder();
	
	strBld.append("<gen:VehicleAgeList>")
	
	strBld.append("<gen:VehicleAge>");
	strBld.append(car1);
	strBld.append("</gen:VehicleAge>");
	
		if(!(car2.isEmpty()||car2.equals("-")))
		{
			strBld.append("<gen:VehicleAge>");
			strBld.append(car2);
			strBld.append("</gen:VehicleAge>");
		}
		if(!(car3.isEmpty()||car3.equals("-")))
		{
			strBld.append("<gen:VehicleAge>");
			strBld.append(car3);
			strBld.append("</gen:VehicleAge>");
		}
		if(!(car4.isEmpty()||car4.equals("-")))
		{
			strBld.append("<gen:VehicleAge>");
			strBld.append(car4);
			strBld.append("</gen:VehicleAge>");
		}		
	
	strBld.append("</gen:VehicleAgeList>");
	//log.info strBld
	testRunner.testCase.setPropertyValue( "BRCList_XML",  strBld.toString())	
	
	log.info(context.expand( '${#TestCase#BRCList_XML}' ))
	}
	else
	{
		empty="";
		testRunner.testCase.setPropertyValue( "BRCList_XML",  empty.toString());
	}]]></script>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="4853c49a-40c9-43cb-a779-300277f5c1c4" name="RCR126Quote">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>SOAPServiceBinding</con:interface>
      <con:operation>GenerateQuote</con:operation>
      <con:request name="RCR126Quote" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="5a88df33-49f4-4b22-96e7-55788d884d78">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://rh0123v:18057/SOAPServiceBinding/BSROS_GenerateQuote_RIN/</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:gen="http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RIN" xmlns:mes="http://www.theaa.com/CommonServices/Data/Message/MessageHeader.2" xmlns:com="http://www.theaa.com/CommonServices/Data/Common" xmlns:prod="http://www.theaa.com/CommonServices/Data/Product.2" xmlns:mem="http://www.theaa.com/CommonServices/Data/Membership.2">
   <soapenv:Header/>
   <soapenv:Body>
      <gen:GenerateQuoteRequest>
         <mes:RequestHeader>
            
            <mes:TransactionId/>
            <mes:Version>v1</mes:Version>
            <mes:RequestDateTime>${RCR126All#NEWPOLICYSTARTDATE}T00:00:00</mes:RequestDateTime>
            <mes:Source>
               <mes:Domain>SALES</mes:Domain>
               <mes:Channel>SanityTesting</mes:Channel>
               <mes:LineOfBusiness>ROS</mes:LineOfBusiness>
               <mes:Name>Pricing Services</mes:Name>
               <mes:InstanceId>BWEclipseAppNode</mes:InstanceId>
               <mes:User>PS Testing</mes:User>
            </mes:Source>
            <mes:MIContext>context</mes:MIContext>
         </mes:RequestHeader>
         <gen:IndicativePriceFlag>false</gen:IndicativePriceFlag>
         <gen:OverrideTenureReasonCode>false</gen:OverrideTenureReasonCode>
         <gen:PaymentType>${#TestCase#payment}</gen:PaymentType>
         <gen:ProductList>
            <prod:EffectivePriceDateTime>${RCR126All#NEWPOLICYSTARTDATE}T00:00:00</prod:EffectivePriceDateTime>
            <prod:PolicyStartDateTime>${RCR126All#NEWPOLICYSTARTDATE}T00:00:00</prod:PolicyStartDateTime>
            <prod:PolicyEndDateTime>${RCR126All#NEWPOLICYENDDATE}T23:59:00</prod:PolicyEndDateTime>
            <prod:OfferCodeDetailList>
               <prod:OfferCodeDetail>
                  <prod:OfferCode>ONLINE</prod:OfferCode>
                  <prod:OfferCodeApplicationLevel>1</prod:OfferCodeApplicationLevel>
                   <prod:IsPersistent>false</prod:IsPersistent>

               </prod:OfferCodeDetail>
            </prod:OfferCodeDetailList>
            <prod:SourceGroup>BC</prod:SourceGroup>
            <prod:SourceCode>Natural Search</prod:SourceCode>
            <prod:Currency>GBP</prod:Currency>
            <gen:MembershipTenure>1</gen:MembershipTenure>
        ${#TestCase#ProductList_XML}
            <gen:CoveredPersons>${#TestCase#Cover}</gen:CoveredPersons>
         </gen:ProductList>
         <gen:CustomerDetails>
            <gen:Postcode>21 7AS</gen:Postcode>
            <mem:MembershipNumber>63560110</mem:MembershipNumber>
         </gen:CustomerDetails>
      </gen:GenerateQuoteRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="GenerateQuote"/>
        <con:wsrmConfig version="1.2"/>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Copy of Create Req Response" id="f7af758b-a394-4b5a-b66c-aeebad4039c7" disabled="true">
    <con:settings/>
    <con:config>
      <script>now=new java.text.SimpleDateFormat("yyyyMMdd'T'HHmmss").format(new Date())
def directory = "N:/Systems_development/RIO/Road Renewals/Soap UI/Test Results/RenewalE2E/XML"
def scenarioNo = context.expand( '${RCR126All#ID}' )
def requestFile = new File(directory, "${scenarioNo}_request"+ now +".xml")
requestFile.append( context.expand('${RenewalE2EQuote#Request}') )
def responseFile = new File(directory, "${scenarioNo}_response"+ now +".xml")
responseFile.append( context.expand('${RenewalE2EQuote#Response}') )</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Validate 126" id="a83e0ced-7aa4-4520-a5e1-0035b414aa50">
    <con:settings/>
    <con:config>
      <script>def numOfIterations = Integer.parseInt(context.expand( '${#TestCase#NumOfIterations}' ))
numOfIterations++
testRunner.testCase.setPropertyValue("NumOfIterations",new Integer(numOfIterations).toString())
def id = context.expand( '${RCR126All#ID}' )
testRunner.testCase.setPropertyValue("ID", id.toString())
def payment = context.expand('${#TestCase#payment}')
// Check what Products to validate for transaction price
def productType = context.expand( '${RCR126All#PRODUCT_TYPE}' )

String delimiters = "\\,|\\&amp;";
String[] prodArr = productType.split(delimiters);
StringBuilder strBld = new StringBuilder();

//validate individual product
if(prodArr.length > 0)
{
	for (prod in prodArr)
	{
		if(prod.trim().equals("Roadside"))
		{
			product= "Roadside"
			func_Check(productType,product,"RO",payment,id)
		}
		if(prod.trim().equals("Basic Breakdown Cover"))
		{
			product="BasicBreakdown"
			func_Check(productType,product,"RO",payment,id)
		}
		if(prod.trim().equals("ROCO"))
		{
			product="ROCO"
			func_Check(productType,product,"RO",payment,id)
		}
		if(prod.trim().equals("ROPOV"))
		{
			product="ROPOV"
			func_Check(productType,product,"RO",payment,id)
		}
		if(prod.trim().equals("Local Driver"))
		{
			product="LocalDriver"
			Code="RO"
			func_Check(productType,product,"RO",payment,id)
		}
		if(prod.trim().equals("Start Up"))
		{
			product="StartUp"
			func_Check(productType,product,"RO",payment,id)
		}
		if(prod.trim().equals("Standby"))
		{
			product="Standby"
			func_Check(productType,product,"RO",payment,id)
		}

		if(prod.trim().equals("Home Start"))
		{
			product= "HomeStart"
			func_Check(productType,product,"HS",payment,id)
		}
		if(prod.trim().equals("Relay"))
		{
			product= "Relay"
			func_Check(productType,product,"RE",payment,id)
		}
		if(prod.trim().equals("Stay Mobile"))
		{
			product= "StayMobile"
			func_Check(productType,product,"SM",payment,id)
		}	
	}
}
if(context.expand( '${RCR126All#BRC}' )=="Y")
{
	product= "BRC"
	func_Check(productType,product,"BRC",payment,id)
}		

testRunner.gotoStepByName("Payment");

def func_Check(productType,product,name,payment,id)
{
	log.info product
	log.info id
	//Transaction price
	def Flex = context.expand( '${RCR126Quote#Response#declare namespace tns=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RIN\'; declare namespace tns3=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns:GenerateQuoteResponse[1]/tns3:FlexFactor[1]}' )
	def RiskIndicator = context.expand( '${RCR126Quote#Response#declare namespace tns=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RIN\'; declare namespace tns3=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns:GenerateQuoteResponse[1]/tns3:CommunityOrRiskIndicator[1]}' )
	//def response = context.expand( '${RCR126Quote#Response#declare namespace ns0=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RIN\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\';       //ns0:GenerateQuoteResponse[1]/ ns0:ProductList[1]/tns6:Payment[1]/tns6:Product[1]								/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:CorePrice[1]/tns6:NetRate[1]}' )
	
	def CoreNet = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:CorePrice[1]/tns6:NetRate[1]}' )
	def CoreNetTax = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:CorePrice[1]/tns6:NetRateTax[1]}' )
	def CoreComm = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:CorePrice[1]/tns6:Commission[1]}' )
	def CoreCommTax = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:CorePrice[1]/tns6:CommissionTax[1]}' )
	def TaxTotal = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:CorePrice[1]/tns6:TaxTotal[1]}' )
	def CoreTotal = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:CorePrice[1]/tns6:Total[1]}' )
	def AAF = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:ArrangementFee[1]/tns6:Fee[1]}' )
	def AAFTax = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:ArrangementFee[1]/tns6:FeeTax[1]}' )
	def AAFTotal = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:ArrangementFee[1]/tns6:Total[1]}' )

	func_write(payment,"Flex","Flexfactor",Flex)
	func_write(payment,"Flex","RiskIndicator",RiskIndicator)	
	func_write(payment,"CORE,Net",product,CoreNet)
	func_write(payment,"CORE,NetTax",product,CoreNetTax)
	func_write(payment,"CORE,Commission",product,CoreComm)
	func_write(payment,"CORE,CommissionTax",product,CoreCommTax)
	func_write(payment,"CORE,TaxTotal",product,TaxTotal)
	func_write(payment,"CORE,Total",product,CoreTotal)
	func_write(payment,"AAF,AAF",product,AAF)
	func_write(payment,"AAF,AAFTax",product,AAFTax)
	func_write(payment,"AAF,Total",product,AAFTotal)
	
	
	
	def CoreDiscTotal = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:AccountingTotals[1]/tns6:CoreDiscountsTotal[1]}' )
	def CoreDiscTaxTotal = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:AccountingTotals[1]/tns6:CoreDiscountsTaxTotal[1]}' )
	def CoreCommDiscTotal = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:AccountingTotals[1]/tns6:CoreCommissionDiscountsTotal[1]}' )
	def CoreNetDiscTotal = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:AccountingTotals[1]/tns6:CoreNetRateDiscountsTotal[1]}' )
	def AAFGrandDiscTotal = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:AccountingTotals[1]/tns6:ArrangementFeeGrandDiscountsTotal[1]}' )
	def AAFTaxDiscTotal = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:AccountingTotals[1]/tns6:ArrangementFeeTaxDiscountsTotal[1]}' )
	def AAFDiscTotal = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:AccountingTotals[1]/tns6:ArrangementFeeDiscountsTotal[1]}' )
	def ProdRel = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:RelativityPriceFactor[1]}' )
	def Extrapolation = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:ExtrapolationFactor[1]}' )
	def ProdAAFTotal = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:ArrangementFeeTotal[1]}' )
	def ProdTotalLessAAF = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:TotalLessArrangementFeeTotal[1]}' )
	def ProdTotalLessDisc = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:TotalLessDiscounts[1]}' )
	def ProdTotal = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:Total[1]}' )

	

	
	
	func_write(payment,"AccountingTotals,CoreDiscTotal",product,CoreDiscTotal)
	func_write(payment,"AccountingTotals,CoreDiscTaxTotal",product,CoreDiscTaxTotal)
	func_write(payment,"AccountingTotals,CoreCommDiscTotal",product,CoreCommDiscTotal)
	func_write(payment,"AccountingTotals,CoreNetDiscTotal",product,CoreNetDiscTotal)
	func_write(payment,"AccountingTotals,AAFGrandDiscTotal",product,AAFGrandDiscTotal)
	func_write(payment,"AccountingTotals,AAFTaxDiscTotal",product,AAFTaxDiscTotal)
	func_write(payment,"AccountingTotals,AAFDiscTotal",product,AAFDiscTotal)
	func_write(payment,"RelFactor",product,ProdRel)
	func_write(payment,"Extrapolation",product,Extrapolation)
	func_write(payment,"AAFTotal",product,AAFTotal)
	func_write(payment,"TotalLessAAFTotal",product,ProdTotalLessAAF)
	func_write(payment,"TotalLessDisc",product,ProdTotalLessDisc)
	func_write(payment,"ProductTotal",product,ProdTotal)

	//Transaction Offer validation
	def OFFER = ""
	def OLDOFFER = context.expand( '${RCR126All#OFFER_CODE}' )
	def OfferNode = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:OfferCodeDiscountList[1]/tns6:OfferCodeDiscount[tns6:Code ="'+OFFER+'"]/tns6:Code[1]}' )
	def Offernet3,OffernetTax3,Offercomm3,OffercommTax3,OfferAAF3,OfferAAFTax3,OfferIFD3,OfferTotal3
	
	if (OLDOFFER !="" &amp;&amp; OFFER != OLDOFFER) // if old offer needs to be clawed back
	{
		def OldOfferNode = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:OfferCodeDiscountList[1]/tns6:OfferCodeDiscount[tns6:Code ="'+OLDOFFER+'"]/tns6:Code[1]}' )
		if (OldOfferNode !="")
		{
			Offernet3 = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:OfferCodeDiscountList[1]/tns6:OfferCodeDiscount[tns6:Code ="'+OLDOFFER+'"]/tns6:NetRate[1]}' )
			OffernetTax3 = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:OfferCodeDiscountList[1]/tns6:OfferCodeDiscount[tns6:Code ="'+OLDOFFER+'"]/tns6:NetRateTax[1]}' )
			Offercomm3 = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:OfferCodeDiscountList[1]/tns6:OfferCodeDiscount[tns6:Code ="'+OLDOFFER+'"]/tns6:Commission[1]}' )
			OffercommTax3 = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:OfferCodeDiscountList[1]/tns6:OfferCodeDiscount[tns6:Code ="'+OLDOFFER+'"]/tns6:CommissionTax[1]}' )
			OfferAAF3 = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:OfferCodeDiscountList[1]/tns6:OfferCodeDiscount[tns6:Code ="'+OLDOFFER+'"]/tns6:ArrangementFee[1]}' )
			OfferAAFTax3 = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:OfferCodeDiscountList[1]/tns6:OfferCodeDiscount[tns6:Code ="'+OLDOFFER+'"]/tns6:ArrangementFeeTax[1]}' )
			OfferIFD3 = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:OfferCodeDiscountList[1]/tns6:OfferCodeDiscount[tns6:Code ="'+OLDOFFER+'"]/tns6:InternallyFundedDiscount[1]}' )
			OfferTotal3 = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:Product[tns6:ProductPriceName ="'+product+'"]/tns6:PriceList[1]/tns6:Price[1]/tns6:PriceBreakdown[1]/tns6:OfferCodeDiscountList[1]/tns6:OfferCodeDiscount[tns6:Code ="'+OLDOFFER+'"]/tns6:Total[1]}' )

			func_write(payment,"Offer,Net",product,Offernet3)
			func_write(payment,"Offer,NetTax",product,OffernetTax3)
			func_write(payment,"Offer,Commission",product,Offercomm3)
			func_write(payment,"Offer,CommissionTax",product,OffercommTax3)
			func_write(payment,"Offer,AAF",product,OfferAAF3)
			func_write(payment,"Offer,AAFTax",product,OfferAAFTax3)
			func_write(payment,"Offer,IFD",product,OfferIFD3)
			func_write(payment,"Offer,Total",product,OfferTotal3)
		}
	}

//Transaction Price Breakdown
def GrandTotal = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:TotalPriceBreakdown[1]/tns6:Total[1]}' )
def GrandTotalExcDisc = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:TotalPriceBreakdown[1]/tns6:TotalExcludingDiscounts[1]}' )
def DiscTotal = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:TotalPriceBreakdown[1]/tns6:DiscountTotal[1]}' )
def BaseCoverTotal = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:TotalPriceBreakdown[1]/tns6:BaseCoverTotal[1]}' )
def BaseCoverTotalLessDisc = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:TotalPriceBreakdown[1]/tns6:BaseCoverTotalLessDiscounts[1]}' )
def BaseCoverAAFTotal = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:TotalPriceBreakdown[1]/tns6:BaseCoverArrangementFeeTotal[1]}' )
def TotalAAF = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:TotalPriceBreakdown[1]/tns6:TotalArrangementFee[1]}' )
def FeeTotal = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:TotalPriceBreakdown[1]/tns6:SurchargeFeeTotal[1]}' )
def TotalLessTotalAAFAddons = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:TotalPriceBreakdown[1]/tns6:TotalLessTotalAAFAndTotalAddons[1]}' )
def TotalLessFees = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:TotalPriceBreakdown[1]/tns6:TotalLessSurchargeFees[1]}' )
def TotalLessAAF = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:TotalPriceBreakdown[1]/tns6:TotalLessArrangementFees[1]}' )
def TotalIPT = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:TotalPriceBreakdown[1]/tns6:TotalIPT[1]}' )
def TotalVAT = context.expand( '${RenewalE2EQuote#Response#declare namespace tns8=\'http://www.theaa.com/CommonServices/Message/BS/Road/GenerateQuote_RNL_2\'; declare namespace tns6=\'http://www.theaa.com/CommonServices/Data/Product.2\'; //tns8:GenerateQuoteResponse[1]/tns8:ProductList[1]/tns6:Payment[1]/tns6:TotalPriceBreakdown[1]/tns6:TotalVAT[1]}' )


	func_write(payment,"TotalPriceBreakdown,CombinedTotal","",GrandTotal)
	func_write(payment,"TotalPriceBreakdown,TotalLessDisc","",GrandTotalExcDisc)
	func_write(payment,"TotalPriceBreakdown,DiscountsTotal","",DiscTotal)
	func_write(payment,"TotalPriceBreakdown,BaseCoverTotal","",BaseCoverTotal)
	func_write(payment,"TotalPriceBreakdown,BaseCoverLessDisc","",BaseCoverTotalLessDisc)
	func_write(payment,"TotalPriceBreakdown,BaseCoverAAFTotal","",BaseCoverAAFTotal)
	func_write(payment,"TotalPriceBreakdown,TotalAAF","",TotalAAF)
	func_write(payment,"TotalPriceBreakdown,TotalFee","",FeeTotal)
	func_write(payment,"TotalPriceBreakdown,TotalLessAAFLessAddons","",TotalLessTotalAAFAddons)
	func_write(payment,"TotalPriceBreakdown,TotalLessFee","",TotalLessFees)
	func_write(payment,"TotalPriceBreakdown,TotalLessAAF","",TotalLessAAF)
	func_write(payment,"TotalPriceBreakdown,TotalVAT","",TotalVAT)
	func_write(payment,"TotalPriceBreakdown,TotalIPT","",TotalIPT)
}


def func_write (payment,element,name,RadarValue)
{
	int totalOfValuesChecked = Integer.parseInt(context.expand( '${#TestCase#TotalOfValuesChecked}' ))
	def prodType = context.expand( '${RCR126All#PRODUCT_TYPE}' )

	if (context.expand('${RCR126All#BRC}') == "Y")
	{
		Car1 = context.expand( '${RCR126All#Car1}' )
		Car2 = context.expand( '${RCR126All#Car2}' )
		Car3 = context.expand( '${RCR126All#Car3}' )
		Car4 = context.expand( '${RCR126All#Car4}' )
		if (Car4 != "")
		{
			product_type = prodType + ",BRC(" + "Car1:" + Car1 + ",Car2:" + Car2 + ",Car3:" + Car3 + ",Car4:" + Car4 + ")"
		}
		else if (Car3 != "")
		{
			product_type = prodType + ",BRC(" + "Car1:" + Car1 + ",Car2:" + Car2 + ",Car3:" + Car3 + ")"
		}
		else if (Car2 != "")
		{
			product_type = prodType + ",BRC("  + "Car1:" + Car1 + ",Car2:" + Car2 + ")"
		}
		else
		{
			product_type = prodType + ",BRC(" + "Car1:" + Car1 + ")"
		}
	}
	else
	{
		product_type = context.expand( '${RCR126All#PRODUCT_TYPE}' )
	}
	if (name == "BasicBreakdown" || name == "LocalDriver" ||  name == "ROCO" || name ==  "ROPOV" || name == "Standby" ||  name == "StartUp" )
	{
		 name= "Roadside"
	}
	
	log.info Pass=(context.expand('${RCR126All#ID}') + "|" + context.expand( '${RCR126All#OFFER_CODE}' ) + "|"  + payment + "|" + product_type + "|" + context.expand( '${RCR126All#COVER}' ) + "|" + name + "|" + element + "| " + RadarValue )

	BufferedWriter bw = new BufferedWriter (new FileWriter (context.expand('${#TestCase#File}'), true));
	bw.write (Pass);
	bw.newLine();
	bw.flush();
	bw.close();
	totalOfValuesChecked++
	testRunner.testCase.setPropertyValue( 'totalOfValuesChecked',  new Integer(totalOfValuesChecked).toString())
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasourceloop" name="DataSource Loop" id="93c9e87d-0491-45c0-80ed-c1f116777802">
    <con:settings/>
    <con:config>
      <dataSourceStep>RCR126All</dataSourceStep>
      <targetStep>SetupPayment</targetStep>
      <discardResults>false</discardResults>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Log Results" id="5715f90f-4cc0-4c01-bfe3-131bb80ebf38">
    <con:settings/>
    <con:config>
      <script>log.info("    ********************************")
log.info("    ************RESULTS*************")
log.info("    Number of Iterations: " + context.expand( '${#TestCase#NumOfIterations}' ))
log.info("    Number of Values Checked: " + context.expand( '${#TestCase#TotalOfValuesChecked}' ))
log.info("    ********************************")
log.info("    ********************************")

NumberofIterations = ("    Number of Iterations: " + context.expand( '${#TestCase#NumOfIterations}'));
NumberofValuesChecked = ("    Number of Values Checked: " + context.expand( '${#TestCase#TotalOfValuesChecked}' ));

BufferedWriter bw = new BufferedWriter (new FileWriter (context.expand('${#TestCase#File}'), true));
bw.write (NumberofIterations);
bw.newLine();
bw.write (NumberofValuesChecked);
bw.newLine();
bw.flush();
bw.close();</script>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>TotalOfValuesChecked</con:name>
      <con:value>0</con:value>
    </con:property>
    <con:property>
      <con:name>NumOfIterations</con:name>
      <con:value>0</con:value>
    </con:property>
    <con:property>
      <con:name>PaymentNumber</con:name>
      <con:value>2</con:value>
    </con:property>
    <con:property>
      <con:name>File</con:name>
      <con:value>N:/Systems_development/RIO/Road Renewals/Soap UI/Test Results/RCR126/RenewalE2Eresults20200212T131758.txt</con:value>
    </con:property>
    <con:property>
      <con:name>ID</con:name>
      <con:value>10</con:value>
    </con:property>
    <con:property>
      <con:name>payment</con:name>
      <con:value>RAP</con:value>
    </con:property>
    <con:property>
      <con:name>ProductList_XML</con:name>
      <con:value><![CDATA[<gen:Product><prod:ProductCode>PRD_UK_0001</prod:ProductCode></gen:Product><gen:Product><prod:ProductCode>PRD_UK_0004</prod:ProductCode></gen:Product>]]></con:value>
    </con:property>
    <con:property>
      <con:name>BRCList_XML</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Cover</con:name>
      <con:value>4</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>4853c49a-40c9-43cb-a779-300277f5c1c4</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>cc67c087-add9-4cd1-9e7f-8e2a8ae9a78c</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
</con:testCase>
